[{"title":"如何安装JDK","url":"/2018/08/16/Java笔记之JDK安装/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n记录一下在不同操作系统中安装JDK，记忆增强\n<!-- more -->\n<The rest of contents | 余下全文>\n# Java JDK安装\n\n### 1. 在Linux中安装JDK以及配置环境变量\n\n#### （1）安装JDK：\n\na. 从Oracle官网上下载需要安装的JDK版本（本文以JDK1.8，tar方式安装为例）。注X86为32位JDK，X64位64位版本。\n\nb. 将tar包防止在 **/usr/java** 目录下，目录也可以根据自己的喜好选择。\n\nc. 执行解压命令进行解压tar包\n\n\ttar -zxvf jdk-8u171-linux-x64.tar.gz\n\t# -z 需要解压的包有gzip属性\n\t# -x 解压\n\t# -v 显示解压的过程(可选)\n\t# -f 使用档案名称，该参数必选并且只能作为最后一个参数\n\n#### （2） 配置环境变量（三种方式）\n\n方式一：系统级别的环境变量修改（修改/etc/profile文件），该方式可以让所有用户的Shell使用这些环境变量，但会给系统带来安全性问题，在profile的文件末尾加上以下内容。\n\n\t#Java的安装目录\n\tJAVA_HOME=/usr/java/jdk1.8.0_171\n\tPATH=$PATH:$JAVA_HOME/bin\n\tCLASSPATH=.\n\texport JAVA_HOME\n\texport PATH\n\texport CLASSPATH\n\n完成添加后保存，使用一下命令让更改生效\n\n\tsource /etc/profile\n\n方式二：用户级别的环境变量修改，将环境变量的使用权限控制到用户级别，在需要给予权限的用户的个人目录 **/root** 下找到 **.bash_profile** 文件并在末尾添加和方式一相同的内容。（注： **.bash_profile** 文件为隐藏文件，使用Shell命令 **ls -a** 可以查看隐藏文件）\n\t\n\t#Java安装目录\n\tJAVA_HOME=/usr/java/jdk1.8.0_171\n\tPATH=$PATH:$JAVA_HOME/bin\n\tCLASSPATH=.\n\texport JAVA_HOME\n\texport PATH\n\texport CLASSPATH\n\n方式三：临时环境变量修改，该方式直接在Shell下进行变量的设置，该方法临时有效，退出登录该方式就失效\n\n\texport JAVA_HOME=/usr/java/jdk1.8.0_171\n\texport PATH=$PATH:$JAVA_HOME/bin \n\texport CLASSPATH=.\n\n\n","tags":["Java"],"categories":["Spring"]},{"title":"如何从Jar包外部加载配置文件","url":"/2018/08/16/Jar包如何读取外部配置文件/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n简单介绍一下Spring项目如何从Jar包外部加载配置文件\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 从Jar包外部读取配置文件的几种情况\n\n### 1. Spring项目\n　　在Spring的配置文件中执行相应的参数配置，其中user.dir当前运行Java命令的路径，在配置中使用@Value(\"${key}\")注解来获取到相应的值，在配置文件中使用时直接使用${key}获取相应的值。这种配置的方法在IDEA中配置文件中会显示当前的参数注入失败，但是不会影响程序的运行\n\n注意：这种方法需要运行Java命令路径、Jar包的路径和配置文件的路径必须在同一个路径下。如果在其他路径使用java -jar命令可能会出现读取不到配置文件的情况\n\n    <!--加载数据库配置文件-->\n    <context:property-placeholder location=\"file:${user.dir}/mysql.properties\"/>\n\n### 2. 非Spring项目\n　　在非Spring的项目外部读取配置文件IDEA环境和Jar包方式的路径会出现一定的差异，为了方便调试和运行，我们可以适配两种不同的路径来忽略不同运行方式带来的差异。\n\n#### （1）IDEA环境路径\n    System.getProperty(\"user.dir\")+\"/migrate.properties\")\n#### （2）JAR包环境路径则需要更为复杂的方式，首先通过类路径(java.class.path)获取到class文件的位置，然后通过拆字符串的方式来生成当前Jar包的路径。\n    /**\n\t * @Author: hy\n\t * @Date: Create in 20:11 2018/7/18\n\t * 文件路径工具类\n\t */\n\tpublic class FilePath {\n\t    /**\n\t     * 获取当前Jar包的绝对路径\n\t     * @return\n\t     */\n\t    public static String getPath(){\n\t        String filePath = System.getProperty(\"java.class.path\");\n\t        String pathSplit = System.getProperty(\"path.separator\");\n\t        if(filePath.contains(pathSplit)){\n\t            filePath = filePath.substring(0,filePath.indexOf(pathSplit));\n\t        }else if(filePath.endsWith(\".jar\")){\n\t            filePath = filePath.substring(0,filePath.lastIndexOf(File.separator)+1);\n\t        }\n\t        return filePath;\n\t    }\n\t}\n      ","tags":["Java"],"categories":["Spring"]},{"title":"Spring+Mybatis依赖配置","url":"/2018/08/16/Spring和Mybatis框架依赖配置/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n使用Spring+Mybatis进行开发所需的依赖配置，非Web应用\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 一组可用的Spring+Mybatis的Maven配置\nSpring+MyBatis+Mysql+Lombok+Logback\n\n    <!-- Lombok -->\n\n    <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.16.18</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <!-- MyBatis+Spring+Druid相关依赖 -->\n\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.0.8</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.4.1</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid</artifactId>\n      <version>1.1.9</version>\n    </dependency>\n\n    <!-- spring整合mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.3.0</version>\n    </dependency>\n\n    <!-- LogBack日志所用的依赖 -->\n\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.2.3</version>\n    </dependency>\n\n     <!--https://mvnrepository.com/artifact/org.slf4j/slf4j-api-->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.25</version>\n    </dependency>\n\n    <!-- Spring框架所用的依赖 -->\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>4.3.14.RELEASE</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>4.3.14.RELEASE</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.springframework/spring-tx -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>4.3.14.RELEASE</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>4.3.14.RELEASE</version>\n    </dependency>\n\n    <!--&lt;!&ndash; Spring定义Bean的支持 &ndash;&gt;-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <version>4.3.14.RELEASE</version>\n    </dependency>\n    \n    <!-- 使用表达式语言在运行时查询和操作对象 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-expression</artifactId>\n      <version>4.3.14.RELEASE</version>\n    </dependency>","tags":["Java"],"categories":["Spring"]},{"title":"Maven项目打可运行Jar包","url":"/2018/08/16/使用Maven打可运行Jar包配置/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n在Maven项目中打Jar包的几种方式介绍\n<!-- more -->\n<The rest of contents | 余下全文>\n# 使用Maven打可运行Jar包配置 #\n## 简介\n　　在使用Java开发的过程中，很多时候我们并不需要开发一个Web应用，而是一个简单的不需要对外提供服务的Java服务，因此我们就需要将我们的程序定义为一个可运行的Jar包，以此来满足我们的需求。\n## 1.配置用于打Jar包的Maven插件\n### （1）方式一：maven-assembly-plugin方式，支持定制化打包方式\n\t<plugin>\n        <!-- NOTE: We don't need a groupId specification because the group is\n            org.apache.maven.plugins ...which is assumed by default. -->\n        <!--maven 装配插件-->\n        <artifactId>maven-assembly-plugin</artifactId>\n        <version>2.4</version>\n        <configuration>\n          <appendAssemblyId>false</appendAssemblyId>\n          <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n          </descriptorRefs>\n          <archive>\n            <manifest>\n\t\t\t  <!--可运行JAR包的入口类全类名-->\n              <mainClass>com.aliyun.main.App</mainClass>\n            </manifest>\n          </archive>\n        </configuration>\n        <executions>\n          <execution>\n            <id>make-assembly</id> <!-- this is used for inheritance merges -->\n            <phase>package</phase> <!-- bind to the packaging phase -->\n            <goals>\n              <goal>single</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n### （2）方式二：\n\t<plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-shade-plugin</artifactId>\n        <version> 1.7.1</version>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>shade</goal>\n            </goals>\n            <configuration>\n              <transformers>\n                <transformer\n                        implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                  <resource>META-INF/spring.handlers</resource>\n                </transformer>\n                <transformer\n                        implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                  <resource>META-INF/spring.schemas</resource>\n                </transformer>\n\t\t\t\t<!--程序的入口类-->\n                <transformer\n                        implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                  <mainClass>com.aliyun.main.App</mainClass>\n                </transformer>\n              </transformers>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n### （3）方式三：（用于打一个类似SDK的Jar包，将相关依赖添加至Jar包中，不需要启动类，需要引用项目为Maven项目）\n\n    \t<!-- 编译插件，其中<arg>中的参数用于让编译器编译时生成参数对应保证接口参数名称不会丢失 -->\n\t\t<plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.3</version>\n          <configuration>\n            <source>1.8</source>\n            <target>1.8</target>\n            <compilerArgs>\n              <arg>-parameters</arg>\n            </compilerArgs>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>2.6</version>\n          <configuration>\n            <archive>\n              <manifest>\n                <addClasspath>true</addClasspath>\n                <classpathPrefix>lib/</classpathPrefix>\n              </manifest>\n            </archive>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-dependency-plugin</artifactId>\n          <version>2.10</version>\n          <executions>\n            <execution>\n              <id>copy-dependencies</id>\n              <phase>package</phase>\n              <goals>\n                <goal>copy-dependencies</goal>\n              </goals>\n              <configuration>\n                <outputDirectory>${project.build.directory}/lib</outputDirectory>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n\n### （4）方式四 生成自带依赖的普通Jar包（非Maven项目）\n\n    \t<plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.3</version>\n          <configuration>\n            <source>1.8</source>\n            <target>1.8</target>\n            <compilerArgs>\n              <arg>-parameters</arg>\n            </compilerArgs>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <configuration>\n            <appendAssemblyId>false</appendAssemblyId>\n            <descriptorRefs>\n              <descriptorRef>jar-with-dependencies</descriptorRef>\n            </descriptorRefs>\n          </configuration>\n          <executions>\n            <execution>\n              <id>make-assembly</id>\n              <phase>package</phase>\n              <goals>\n                <goal>assembly</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n\n\n","tags":["Java"],"categories":["Spring"]}]