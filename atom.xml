<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>文盲</title>
  
  <subtitle>文盲的个人博客，不爱技术爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-16T03:45:53.754Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何安装JDK</title>
    <link href="http://yoursite.com/2018/08/16/Java%E7%AC%94%E8%AE%B0%E4%B9%8BJDK%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/08/16/Java笔记之JDK安装/</id>
    <published>2018-08-16T03:44:00.000Z</published>
    <updated>2018-08-16T03:45:53.754Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 如何安装JDK：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>记录一下在不同操作系统中安装JDK，记忆增强<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="Java-JDK安装"><a href="#Java-JDK安装" class="headerlink" title="Java JDK安装"></a>Java JDK安装</h1><h3 id="1-在Linux中安装JDK以及配置环境变量"><a href="#1-在Linux中安装JDK以及配置环境变量" class="headerlink" title="1. 在Linux中安装JDK以及配置环境变量"></a>1. 在Linux中安装JDK以及配置环境变量</h3><h4 id="（1）安装JDK："><a href="#（1）安装JDK：" class="headerlink" title="（1）安装JDK："></a>（1）安装JDK：</h4><p>a. 从Oracle官网上下载需要安装的JDK版本（本文以JDK1.8，tar方式安装为例）。注X86为32位JDK，X64位64位版本。</p><p>b. 将tar包防止在 <strong>/usr/java</strong> 目录下，目录也可以根据自己的喜好选择。</p><p>c. 执行解压命令进行解压tar包</p><pre><code>tar -zxvf jdk-8u171-linux-x64.tar.gz# -z 需要解压的包有gzip属性# -x 解压# -v 显示解压的过程(可选)# -f 使用档案名称，该参数必选并且只能作为最后一个参数</code></pre><h4 id="（2）-配置环境变量（三种方式）"><a href="#（2）-配置环境变量（三种方式）" class="headerlink" title="（2） 配置环境变量（三种方式）"></a>（2） 配置环境变量（三种方式）</h4><p>方式一：系统级别的环境变量修改（修改/etc/profile文件），该方式可以让所有用户的Shell使用这些环境变量，但会给系统带来安全性问题，在profile的文件末尾加上以下内容。</p><pre><code>#Java的安装目录JAVA_HOME=/usr/java/jdk1.8.0_171PATH=$PATH:$JAVA_HOME/binCLASSPATH=.export JAVA_HOMEexport PATHexport CLASSPATH</code></pre><p>完成添加后保存，使用一下命令让更改生效</p><pre><code>source /etc/profile</code></pre><p>方式二：用户级别的环境变量修改，将环境变量的使用权限控制到用户级别，在需要给予权限的用户的个人目录 <strong>/root</strong> 下找到 <strong>.bash_profile</strong> 文件并在末尾添加和方式一相同的内容。（注： <strong>.bash_profile</strong> 文件为隐藏文件，使用Shell命令 <strong>ls -a</strong> 可以查看隐藏文件）</p><pre><code>#Java安装目录JAVA_HOME=/usr/java/jdk1.8.0_171PATH=$PATH:$JAVA_HOME/binCLASSPATH=.export JAVA_HOMEexport PATHexport CLASSPATH</code></pre><p>方式三：临时环境变量修改，该方式直接在Shell下进行变量的设置，该方法临时有效，退出登录该方式就失效</p><pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_171export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 如何安装JDK：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;记录一下在不同操作系统中安装JDK，记忆增强&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何从Jar包外部加载配置文件</title>
    <link href="http://yoursite.com/2018/08/16/Jar%E5%8C%85%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/08/16/Jar包如何读取外部配置文件/</id>
    <published>2018-08-16T03:42:37.000Z</published>
    <updated>2018-08-16T03:44:02.005Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 如何从Jar包外部加载配置文件：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>简单介绍一下Spring项目如何从Jar包外部加载配置文件<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="从Jar包外部读取配置文件的几种情况"><a href="#从Jar包外部读取配置文件的几种情况" class="headerlink" title="从Jar包外部读取配置文件的几种情况"></a>从Jar包外部读取配置文件的几种情况</h1><h3 id="1-Spring项目"><a href="#1-Spring项目" class="headerlink" title="1. Spring项目"></a>1. Spring项目</h3><p>　　在Spring的配置文件中执行相应的参数配置，其中user.dir当前运行Java命令的路径，在配置中使用@Value(“${key}”)注解来获取到相应的值，在配置文件中使用时直接使用${key}获取相应的值。这种配置的方法在IDEA中配置文件中会显示当前的参数注入失败，但是不会影响程序的运行</p><p>注意：这种方法需要运行Java命令路径、Jar包的路径和配置文件的路径必须在同一个路径下。如果在其他路径使用java -jar命令可能会出现读取不到配置文件的情况</p><pre><code>&lt;!--加载数据库配置文件--&gt;&lt;context:property-placeholder location=&quot;file:${user.dir}/mysql.properties&quot;/&gt;</code></pre><h3 id="2-非Spring项目"><a href="#2-非Spring项目" class="headerlink" title="2. 非Spring项目"></a>2. 非Spring项目</h3><p>　　在非Spring的项目外部读取配置文件IDEA环境和Jar包方式的路径会出现一定的差异，为了方便调试和运行，我们可以适配两种不同的路径来忽略不同运行方式带来的差异。</p><h4 id="（1）IDEA环境路径"><a href="#（1）IDEA环境路径" class="headerlink" title="（1）IDEA环境路径"></a>（1）IDEA环境路径</h4><pre><code>System.getProperty(&quot;user.dir&quot;)+&quot;/migrate.properties&quot;)</code></pre><h4 id="（2）JAR包环境路径则需要更为复杂的方式，首先通过类路径-java-class-path-获取到class文件的位置，然后通过拆字符串的方式来生成当前Jar包的路径。"><a href="#（2）JAR包环境路径则需要更为复杂的方式，首先通过类路径-java-class-path-获取到class文件的位置，然后通过拆字符串的方式来生成当前Jar包的路径。" class="headerlink" title="（2）JAR包环境路径则需要更为复杂的方式，首先通过类路径(java.class.path)获取到class文件的位置，然后通过拆字符串的方式来生成当前Jar包的路径。"></a>（2）JAR包环境路径则需要更为复杂的方式，首先通过类路径(java.class.path)获取到class文件的位置，然后通过拆字符串的方式来生成当前Jar包的路径。</h4><pre><code>/** * @Author: hy * @Date: Create in 20:11 2018/7/18 * 文件路径工具类 */public class FilePath {    /**     * 获取当前Jar包的绝对路径     * @return     */    public static String getPath(){        String filePath = System.getProperty(&quot;java.class.path&quot;);        String pathSplit = System.getProperty(&quot;path.separator&quot;);        if(filePath.contains(pathSplit)){            filePath = filePath.substring(0,filePath.indexOf(pathSplit));        }else if(filePath.endsWith(&quot;.jar&quot;)){            filePath = filePath.substring(0,filePath.lastIndexOf(File.separator)+1);        }        return filePath;    }}</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 如何从Jar包外部加载配置文件：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;简单介绍一下Spring项目如何从Jar包外部加载配置文件&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Maven项目打可运行Jar包</title>
    <link href="http://yoursite.com/2018/08/16/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8F%AF%E8%BF%90%E8%A1%8CJar%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/08/16/使用Maven打可运行Jar包配置/</id>
    <published>2018-08-16T03:35:37.000Z</published>
    <updated>2018-08-16T03:47:32.443Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Maven项目打可运行Jar包：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>在Maven项目中打Jar包的几种方式介绍<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="使用Maven打可运行Jar包配置"><a href="#使用Maven打可运行Jar包配置" class="headerlink" title="使用Maven打可运行Jar包配置"></a>使用Maven打可运行Jar包配置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>　　在使用Java开发的过程中，很多时候我们并不需要开发一个Web应用，而是一个简单的不需要对外提供服务的Java服务，因此我们就需要将我们的程序定义为一个可运行的Jar包，以此来满足我们的需求。</p><h2 id="1-配置用于打Jar包的Maven插件"><a href="#1-配置用于打Jar包的Maven插件" class="headerlink" title="1.配置用于打Jar包的Maven插件"></a>1.配置用于打Jar包的Maven插件</h2><h3 id="（1）方式一：maven-assembly-plugin方式，支持定制化打包方式"><a href="#（1）方式一：maven-assembly-plugin方式，支持定制化打包方式" class="headerlink" title="（1）方式一：maven-assembly-plugin方式，支持定制化打包方式"></a>（1）方式一：maven-assembly-plugin方式，支持定制化打包方式</h3><pre><code>&lt;plugin&gt;    &lt;!-- NOTE: We don&apos;t need a groupId specification because the group is        org.apache.maven.plugins ...which is assumed by default. --&gt;    &lt;!--maven 装配插件--&gt;    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;    &lt;version&gt;2.4&lt;/version&gt;    &lt;configuration&gt;      &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;      &lt;descriptorRefs&gt;        &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;      &lt;/descriptorRefs&gt;      &lt;archive&gt;        &lt;manifest&gt;          &lt;!--可运行JAR包的入口类全类名--&gt;          &lt;mainClass&gt;com.aliyun.main.App&lt;/mainClass&gt;        &lt;/manifest&gt;      &lt;/archive&gt;    &lt;/configuration&gt;    &lt;executions&gt;      &lt;execution&gt;        &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt;        &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;        &lt;goals&gt;          &lt;goal&gt;single&lt;/goal&gt;        &lt;/goals&gt;      &lt;/execution&gt;    &lt;/executions&gt;  &lt;/plugin&gt;</code></pre><h3 id="（2）方式二："><a href="#（2）方式二：" class="headerlink" title="（2）方式二："></a>（2）方式二：</h3><pre><code>&lt;plugin&gt;    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;    &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;    &lt;version&gt; 1.7.1&lt;/version&gt;    &lt;executions&gt;      &lt;execution&gt;        &lt;phase&gt;package&lt;/phase&gt;        &lt;goals&gt;          &lt;goal&gt;shade&lt;/goal&gt;        &lt;/goals&gt;        &lt;configuration&gt;          &lt;transformers&gt;            &lt;transformer                    implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;              &lt;resource&gt;META-INF/spring.handlers&lt;/resource&gt;            &lt;/transformer&gt;            &lt;transformer                    implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;              &lt;resource&gt;META-INF/spring.schemas&lt;/resource&gt;            &lt;/transformer&gt;            &lt;!--程序的入口类--&gt;            &lt;transformer                    implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;              &lt;mainClass&gt;com.aliyun.main.App&lt;/mainClass&gt;            &lt;/transformer&gt;          &lt;/transformers&gt;        &lt;/configuration&gt;      &lt;/execution&gt;    &lt;/executions&gt;  &lt;/plugin&gt;</code></pre><h3 id="（3）方式三：（用于打一个类似SDK的Jar包，将相关依赖添加至Jar包中，不需要启动类，需要引用项目为Maven项目）"><a href="#（3）方式三：（用于打一个类似SDK的Jar包，将相关依赖添加至Jar包中，不需要启动类，需要引用项目为Maven项目）" class="headerlink" title="（3）方式三：（用于打一个类似SDK的Jar包，将相关依赖添加至Jar包中，不需要启动类，需要引用项目为Maven项目）"></a>（3）方式三：（用于打一个类似SDK的Jar包，将相关依赖添加至Jar包中，不需要启动类，需要引用项目为Maven项目）</h3><pre><code>&lt;!-- 编译插件，其中&lt;arg&gt;中的参数用于让编译器编译时生成参数对应保证接口参数名称不会丢失 --&gt;&lt;plugin&gt;  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  &lt;version&gt;3.3&lt;/version&gt;  &lt;configuration&gt;    &lt;source&gt;1.8&lt;/source&gt;    &lt;target&gt;1.8&lt;/target&gt;    &lt;compilerArgs&gt;      &lt;arg&gt;-parameters&lt;/arg&gt;    &lt;/compilerArgs&gt;  &lt;/configuration&gt;&lt;/plugin&gt;&lt;plugin&gt;  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;  &lt;version&gt;2.6&lt;/version&gt;  &lt;configuration&gt;    &lt;archive&gt;      &lt;manifest&gt;        &lt;addClasspath&gt;true&lt;/addClasspath&gt;        &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;      &lt;/manifest&gt;    &lt;/archive&gt;  &lt;/configuration&gt;&lt;/plugin&gt;&lt;plugin&gt;  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  &lt;version&gt;2.10&lt;/version&gt;  &lt;executions&gt;    &lt;execution&gt;      &lt;id&gt;copy-dependencies&lt;/id&gt;      &lt;phase&gt;package&lt;/phase&gt;      &lt;goals&gt;        &lt;goal&gt;copy-dependencies&lt;/goal&gt;      &lt;/goals&gt;      &lt;configuration&gt;        &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;      &lt;/configuration&gt;    &lt;/execution&gt;  &lt;/executions&gt;&lt;/plugin&gt;</code></pre><h3 id="（4）方式四-生成自带依赖的普通Jar包（非Maven项目）"><a href="#（4）方式四-生成自带依赖的普通Jar包（非Maven项目）" class="headerlink" title="（4）方式四 生成自带依赖的普通Jar包（非Maven项目）"></a>（4）方式四 生成自带依赖的普通Jar包（非Maven项目）</h3><pre><code>&lt;plugin&gt;  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  &lt;version&gt;3.3&lt;/version&gt;  &lt;configuration&gt;    &lt;source&gt;1.8&lt;/source&gt;    &lt;target&gt;1.8&lt;/target&gt;    &lt;compilerArgs&gt;      &lt;arg&gt;-parameters&lt;/arg&gt;    &lt;/compilerArgs&gt;  &lt;/configuration&gt;&lt;/plugin&gt;&lt;plugin&gt;  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;  &lt;configuration&gt;    &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;    &lt;descriptorRefs&gt;      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;    &lt;/descriptorRefs&gt;  &lt;/configuration&gt;  &lt;executions&gt;    &lt;execution&gt;      &lt;id&gt;make-assembly&lt;/id&gt;      &lt;phase&gt;package&lt;/phase&gt;      &lt;goals&gt;        &lt;goal&gt;assembly&lt;/goal&gt;      &lt;/goals&gt;    &lt;/execution&gt;  &lt;/executions&gt;&lt;/plugin&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Maven项目打可运行Jar包：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;在Maven项目中打Jar包的几种方式介绍&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Mybatis依赖配置</title>
    <link href="http://yoursite.com/2018/08/16/Spring%E5%92%8CMybatis%E6%A1%86%E6%9E%B6%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/08/16/Spring和Mybatis框架依赖配置/</id>
    <published>2018-08-16T03:35:37.000Z</published>
    <updated>2018-08-16T03:42:13.973Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Spring+Mybatis依赖配置：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>使用Spring+Mybatis进行开发所需的依赖配置，非Web应用<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="一组可用的Spring-Mybatis的Maven配置"><a href="#一组可用的Spring-Mybatis的Maven配置" class="headerlink" title="一组可用的Spring+Mybatis的Maven配置"></a>一组可用的Spring+Mybatis的Maven配置</h1><p>Spring+MyBatis+Mysql+Lombok+Logback</p><pre><code>&lt;!-- Lombok --&gt;&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  &lt;artifactId&gt;lombok&lt;/artifactId&gt;  &lt;version&gt;1.16.18&lt;/version&gt;  &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- MyBatis+Spring+Druid相关依赖 --&gt;&lt;dependency&gt;  &lt;groupId&gt;mysql&lt;/groupId&gt;  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  &lt;version&gt;5.0.8&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;druid&lt;/artifactId&gt;  &lt;version&gt;1.1.9&lt;/version&gt;&lt;/dependency&gt;&lt;!-- spring整合mybatis --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;  &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- LogBack日志所用的依赖 --&gt;&lt;dependency&gt;  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;  &lt;version&gt;1.2.3&lt;/version&gt;&lt;/dependency&gt; &lt;!--https://mvnrepository.com/artifact/org.slf4j/slf4j-api--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;  &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Spring框架所用的依赖 --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;  &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;  &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--&amp;lt;!&amp;ndash; Spring定义Bean的支持 &amp;ndash;&amp;gt;--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;  &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 使用表达式语言在运行时查询和操作对象 --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;  &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Spring+Mybatis依赖配置：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;使用Spring+Mybatis进行开发所需的依赖配置，非Web应用&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
